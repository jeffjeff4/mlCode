{
  "sections" : [
    {
      "type" : "plain",
      "contents" : "pointwise, pairwise, listwise的区别\n\n在学习排序（Learning to Rank, LTR）领域，pointwise、pairwise和listwise是三种主要的方法，用于训练模型以对文档或项目进行排序。它们的主要区别在于如何处理排序任务、输入数据和优化目标。以下是详细对比，附带示例说明：\n\n1. Pointwise 方法\n\n定义：Pointwise方法将排序问题转化为回归或分类问题，为每个文档（或项目）独立预测一个分数或相关性标签，排序通过这些分数的降序排列完成。\n输入：每个文档单独作为输入，模型预测一个绝对分数或类别（如相关性等级）。\n优化目标：最小化每个文档的预测分数与真实相关性标签之间的损失（如均方误差或交叉熵）。\n特点：\n\n不直接考虑文档之间的相对顺序。\n简单，易于实现，但可能无法捕捉排序任务中的相对关系。\n常用于简单的排序场景或回归任务。\n\n\n损失函数：例如，均方误差（MSE）：\n$$L = \\frac{1}{N} \\sum_{i=1}^N (s_i - y_i)^2$$\n其中，$ s_i $是模型预测的分数，$ y_i $是真实相关性标签，$ N $是文档总数。\n优点：\n\n计算简单，适合大规模数据集。\n可直接使用现有的回归或分类算法。\n\n\n缺点：\n\n忽略文档之间的相对顺序，可能导致次优排序结果。\n对排序指标（如NDCG）优化效果较差，因为它不直接建模排名。\n\n\n\n示例\n\n场景：搜索“best sci-fi movies”，有三个文档：$ d_1 $（《星际穿越》）、$ d_2 $（《银翼杀手》）、$ d_3 $（《疯狂的麦克斯》），真实相关性标签为$ (3, 2, 1) $。\nPointwise处理：\n\n模型为每个文档预测一个分数，例如：\n\n$ d_1 $: 预测2.8（真实3），损失$ (2.8 - 3)^2 = 0.04 $。\n$ d_2 $: 预测2.1（真实2），损失$$  (2.1 - 2)^2 = 0.01 \\）。\n( d_3  $: 预测1.5（真实1），损失$  (1.5 - 1)^2 = 0.25  $$。\n\n\n总损失：$ 0.04 + 0.01 + 0.25 = 0.3 $。\n排序：按预测分数降序排列：$ d_1 > d_2 > d_3 $。\n问题：即使预测分数接近真实标签，排序可能不直接优化NDCG（例如，如果$ d_3 $分数高于$ d_1 $，排序错误但损失可能较小）。\n\n\n\n\n2. Pairwise 方法\n\n定义：Pairwise方法将排序问题转化为成对比较问题，关注文档对的相对顺序，预测哪一个文档应该排在另一个之前。\n输入：文档对（$ d_i, d_j $），模型学习预测$ d_i $是否应排在$ d_j $之前。\n优化目标：最大化正确预测文档对相对顺序的概率，常用交叉熵损失或其他成对损失函数。\n特点：\n\n直接建模文档之间的相对顺序，适合排序任务。\n比Pointwise更贴近排序的本质，但不直接优化整体排序指标。\n典型算法：RankNet（如前所述，使用sigmoid函数建模概率）。\n\n\n损失函数：以RankNet为例，损失为：\n$$L = - \\bar{P}_{ij} \\log P_{ij} - (1 - \\bar{P}_{ij}) \\log (1 - P_{ij})$$\n其中，$ P_{ij} = \\frac{1}{1 + e^{-(s_i - s_j)}} $是预测$ d_i > d_j $的概率，$ \\bar{P}_{ij} $是真实相对顺序（1或0）。\n优点：\n\n考虑文档之间的相对顺序，排序效果优于Pointwise。\n适合搜索等需要相对排名的场景。\n\n\n缺点：\n\n计算复杂度较高（需处理$ O(n^2) $文档对，$ n $是文档数）。\n不直接优化整体排序指标（如NDCG），可能导致次优全局排序。\n\n\n\n示例\n\n场景：同上，三个文档，真实排序$ d_1 > d_2 > d_3 $。\nPairwise处理（以RankNet为例）：\n\n模型预测分数：$ s_1 = 0.8, s_2 = 0.7, s_3 = 0.9 $。\n文档对：\n\n$ (d_1, d_2) $: 真实$ d_1 > d_2 $，预测$ P_{12} = \\frac{1}{1 + e^{-(0.8 - 0.7)}} \\approx 0.52 $，损失小。\n$ (d_1, d_3) $: 真实$ d_1 > d_3 $，但预测$ s_3 > s_1 $，$ P_{13} \\approx 0.48 $，损失较大。\n$ (d_2, d_3) $: 真实$ d_2 > d_3 $，但预测$ s_3 > s_2 $，$ P_{23} \\approx 0.46 $，损失较大。\n\n\n优化目标：调整分数使$ s_1 > s_2 > s_3 $。\n问题：Pairwise只关注成对顺序，错误排序（如$ d_3 $排第一）对NDCG影响大，但Pairwise不直接优化此指标。\n\n\n\n\n3. Listwise 方法\n\n定义：Listwise方法将排序问题视为对整个文档列表的优化，直接建模整个排序列表的正确性，优化与排序指标（如NDCG、MAP）直接相关的损失。\n输入：整个文档列表，模型预测整个列表的排序或分数分布。\n优化目标：直接优化排序指标（如NDCG）或基于列表的损失函数（如SoftRank或ListNet的KL散度）。\n特点：\n\n直接针对排序任务的全局目标（如NDCG），更贴近实际应用需求。\n复杂度较高，但效果通常优于Pointwise和Pairwise。\n典型算法：ListNet（KL散度损失）、SoftRank（平滑NDCG）、LambdaMART（结合LambdaRank思想）。\n\n\n损失函数：以ListNet为例，使用KL散度最小化预测分数分布与真实相关性分布的差异：\n$$L = \\text{KL}(P(y) || P(s))$$\n其中，$ P(y) $是基于真实标签的概率分布，$ P(s) $是基于模型分数的概率分布。\n优点：\n\n直接优化整体排序指标，效果更优。\n更适合需要高质量排名的场景（如搜索引擎）。\n\n\n缺点：\n\n计算复杂度和实现难度较高。\n需要精心设计损失函数以近似NDCG等非平滑指标。\n\n\n\n示例\n\n场景：同上，三个文档，真实排序$ d_1 > d_2 > d_3 $。\nListwise处理（以ListNet为例）：\n\n模型预测分数：$ s_1 = 0.8, s_2 = 0.7, s_3 = 0.9 $，排序为$ d_3 > d_1 > d_2 $。\nListwise方法将真实标签$ (3, 2, 1) $转换为概率分布（如通过softmax），并将预测分数也转换为概率分布。\n损失：计算预测分布与真实分布的KL散度，优化整个列表的排序。\n优势：Listwise方法直接考虑$ d_3 $排第一对NDCG的负面影响，优先调整分数以优化整体排序（如使$ s_1 > s_2 > s_3 $）。\n\n\n\n\n4. 总结对比\n\n4. 总结对比\n\n\n\n\n特性      |              Pointwise              |               Pairwise                   |                    Listwise\n输入      |                单个文档               |                文档对                     |                  整个文档列表\n优化目标  |      回归\/分类损失（如MSE、交叉熵）      |         成对相对顺序（如交叉熵）             |            整体排序指标（如NDCG、MAP）\n算法示例  |          线性回归、分类器（如SVM）      |             RankNet、LambdaRank           |                ListNet、SoftRank、LambdaMART\n复杂度    |              低（$ O(n) $）          |               中（$ O(n^2) $）            |               高（取决于实现，可能$ O(n^2) $或更高）\n优点     |            简单，易实现                |            考虑相对顺序，排序效果较好        |                 直接优化排序指标，效果最佳\n缺点     |            忽略相对顺序，排序效果有限    |          不直接优化整体指标，复杂度较高       |                实现复杂，计算代价高\n适用场景  |            简单排序任务               |             搜索、推荐系统                  |            高质量排序（如搜索引擎、推荐系统）\n\n\n5. 实际应用中的选择\n\nPointwise：适合快速原型或简单任务，例如初步筛选相关文档。\nPairwise：适合需要考虑相对顺序的场景，如RankNet在早期搜索系统中的应用。\nListwise：适合对排序质量要求高的场景，如现代搜索引擎（LambdaMART在Bing中广泛使用）。\n\n举例（搜索系统）\n\nPointwise：预测每个电影的相关性分数，可能导致《疯狂的麦克斯》分数略高但排序错误。\nPairwise（如RankNet）：确保《星际穿越》排在《银翼杀手》前，但可能不优先纠正高排位错误。\nListwise（如LambdaMART）：直接优化NDCG，确保《星际穿越》排第一以最大化用户满意度。"
    }
  ],
  "metadata" : {
    "leftMargin" : 2.54,
    "bottomMargin" : 2.54,
    "pageSize" : 0,
    "rightMargin" : 2.54,
    "indentStyle" : "tabs",
    "pageNumberingEnabled" : false,
    "indentWidth" : 4,
    "writingDirection" : -1,
    "topMargin" : 2.54,
    "previewStyle" : "preview_modern"
  }
}